package GenerickiZadatak;

// GenericList<GenericList<Integer>>
public class GenericList<T> {
    public class Node {
        // Ovo se zameni sa
        // GenericList<Integer>
        // Znaci svaki moj cvor ce da cuva jednu GenericList<Integer>
        T data;
        Node next;

        public Node(T data) {
            this.data = data;
            this.next = null;
        }

        @Override
        public String toString() {
            return data.toString();
        }
    }

    private Node head;

    public GenericList() {
        head = null;
    }

    public void add(T element) {
        Node newNode = new Node(element);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    public void remove() {
        Node current = head;
        Node previous = null;
        if (head == null) {
            System.out.println("List is empty");
            return;
        }
        if (head.next == null) {
            head = null;
            return;
        }
        while(current.next != null) {
            previous = current;
            current = current.next;
        }
        previous.next = null;
    }
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("[ ");
        Node current = head;
        while (current != null) {
            sb.append(current).append(" ");
            current = current.next;
        }
        sb.append("]");
        return sb.toString();
    }
//    public void printAll() {
//        StringBuilder sb = new StringBuilder("[ ");
//        Node current = head;
//        while (current != null) {
//            sb.append(current.toString()).append(" ");
//            current = current.next;
//        }
//        sb.append("]");
//        System.out.println(sb.toString());
//    }
    public void printAll() {
        System.out.println(this.toString());
    }

    public int findIndex(T element) {
        int index = -1;
        int currentIndex = 0;
        Node current = head;
        while (current != null) {
            if (current.data.equals(element)) {
                index = currentIndex;
            }
            current = current.next;
            currentIndex++;
        }
        return index;
    }
}